{ parameter nat ;
  storage unit ;
  code { LAMBDA
           (pair nat nat)
           nat
           { UNPAIR ;
             DUP ;
             DUG 2 ;
             PAIR ;
             PUSH nat 1 ;
             DIG 2 ;
             PAIR ;
             PAIR ;
             LEFT nat ;
             LOOP_LEFT
               { UNPAIR ;
                 UNPAIR ;
                 DIG 2 ;
                 UNPAIR ;
                 PUSH nat 0 ;
                 DUP 3 ;
                 COMPARE ;
                 EQ ;
                 IF { DROP 3 ; RIGHT (pair (pair nat nat) (pair nat nat)) }
                    { PUSH nat 0 ;
                      PUSH nat 1 ;
                      DUP 4 ;
                      AND ;
                      COMPARE ;
                      EQ ;
                      IF { DIG 3 } { DUP ; DIG 4 ; MUL } ;
                      SWAP ;
                      DUP ;
                      MUL ;
                      PUSH nat 1 ;
                      DIG 3 ;
                      LSR ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      DIG 2 ;
                      PAIR ;
                      PAIR ;
                      LEFT nat } } } ;
         SWAP ;
         CAR ;
         PUSH mutez 1 ;
         PUSH nat 30000 ;
         DUP 3 ;
         COMPARE ;
         LT ;
         IF { DIG 2 ;
              DROP ;
              PUSH nat 3000 ;
              DIG 2 ;
              EDIV ;
              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
              CAR }
            { SWAP ;
              DUP ;
              DUG 2 ;
              PUSH nat 1000 ;
              PAIR ;
              DUP 4 ;
              SWAP ;
              EXEC ;
              DIG 2 ;
              PUSH nat 1001 ;
              PAIR ;
              DIG 3 ;
              SWAP ;
              EXEC ;
              EDIV ;
              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
              CAR ;
              PUSH nat 10 ;
              MUL } ;
         MUL ;
         FAILWITH } }

