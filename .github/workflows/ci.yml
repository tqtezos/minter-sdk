name: CI

on:
  pull_request:
  push:
    branches: [main]

env:
  LIGO_VERSION: 0.12.0

jobs:

  # Build LIGO contracts
  compile-ligo:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: yarn
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn
      if: steps.yarn.outputs.cache-hit != 'true'
    - run: docker pull ligolang/ligo:$LIGO_VERSION
    - run: yarn compile-ligo
      working-directory: packages/minter-contracts
    # Compress compiled Michelson
    - run: tar -czf bin.tar.gz bin
      working-directory: packages/minter-contracts
    # Upload compiled Michelson to be shared by other jobs
    - uses: actions/upload-artifact@v2
      with:
        name: ligo-bin
        path: packages/minter-contracts/bin.tar.gz
        retention-days: 1

  generate-types:
    name: Generate Types
    runs-on: ubuntu-latest
    needs: compile-ligo
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: yarn
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn
      if: steps.yarn.outputs.cache-hit != 'true'

    - uses: actions/download-artifact@v2
      name: Download compiled contracts
      with:
        name: ligo-bin
        path: packages/minter-contracts

    - run: tar -xzf bin.tar.gz
      name: Unpack compiled contracts
      working-directory: packages/minter-contracts

    - name: Generate Types
      working-directory: packages/minter-contracts
      run: yarn run generate-types

    # Compress generated TypeScript types
    - run: tar -czf bin-ts.tar.gz bin-ts
      working-directory: packages/minter-contracts
    # Upload generated TypeScript to be shared by other jobs
    - uses: actions/upload-artifact@v2
      with:
        name: bin-ts
        path: packages/minter-contracts/bin-ts.tar.gz
        retention-days: 1

  test-jest:
    name: Jest tests
    runs-on: ubuntu-latest
    needs: generate-types
    strategy:
      matrix:
        worker: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v2
      id: yarn
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn
      if: steps.yarn.outputs.cache-hit != 'true'

    - run: ./flextesa/start-sandbox.sh
      name: Start sandbox

    - uses: actions/download-artifact@v2
      name: Download generated TypeScript types
      with:
        name: bin-ts
        path: packages/minter-contracts

    - run: tar -xzf bin-ts.tar.gz
      name: Unpack generated TypeScript types
      working-directory: packages/minter-contracts

    - run: yarn spawn-jest-worker -w 13 -i ${{ matrix.worker }}
      working-directory: packages/minter-contracts

  # Test LIGO contracts (whose that are covered with cleveland)
  test-cleveland:
    name: Cleveland tests
    runs-on: ubuntu-latest
    needs: compile-ligo
    steps:
    - uses: actions/checkout@v2
      if: github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.ref == 'refs/heads/main' || github.event.ref == 'refs/heads/develop'

    - uses: actions/cache@v1
      name: Cache ~/.stack
      with:
        path: ~/.stack
        key: stack

    - uses: haskell/actions/setup@v2
      name: Setup Haskell Stack
      with:
        ghc-version: 9.2.1
        stack-version: 2.3

    - uses: actions/download-artifact@v2
      name: Download compiled contracts
      with:
        name: ligo-bin
        path: packages/minter-contracts

    - run: tar -xzf bin.tar.gz
      name: Unpack compiled contracts
      working-directory: packages/minter-contracts

    - name: Build dependencies
      run: make -C packages/minter-contracts/test-hs build-haskell-deps

    - name: Tests in emulation
      run: |
        make -C packages/minter-contracts/test-hs \
          EXTRA_STACK_OPTIONS="--system-ghc --ghc-options=-Werror" \
          TEST_ARGUMENTS="--nettest-no-run-network"

  links-check:
    name: Verify links in markdown documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: serokell/xrefcheck-action@v1
      with:
        xrefcheck-version: 0.1.3

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: yarn
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn
      if: steps.yarn.outputs.cache-hit != 'true'
    - name: Run ESLint
      run: yarn lerna run lint
