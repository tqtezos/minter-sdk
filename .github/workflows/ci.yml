name: CI

on:
  pull_request:
  push:
    branches: [main, develop]

env:
  LIGO_VERSION: 0.12.0
  LIGO_EXE: >-
    docker run --rm -v "$$GITHUB_WORKSPACE":"$$GITHUB_WORKSPACE" -w "$$PWD" ligolang/ligo:$$LIGO_VERSION

jobs:

  # Build LIGO contracts
  compile-ligo:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: yarn
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn
      if: steps.yarn.outputs.cache-hit != 'true'
    - run: docker pull ligolang/ligo:$LIGO_VERSION
    - run: yarn compile-ligo
      working-directory: packages/minter-contracts      
    - run: tar -czf bin.tar.gz bin
      working-directory: packages/minter-contracts
    - uses: actions/upload-artifact@v2
      with:
        name: ligo-bin
        path: packages/minter-contracts/bin.tar.gz
        retention-days: 1
  
  michelson-to-ts:
    name: Michelson to TS
    runs-on: ubuntu-latest
    needs: compile-ligo
    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v2
      id: cache-tezos-client
      with:
        path: packages/minter-contracts/tezos-client
        key: tezos-client

    - name: Install tezos-client
      if: steps.cache-tezos-client.outputs.cache-hit != 'true'
      run: wget https://github.com/serokell/tezos-packaging/releases/download/v8.2-3/tezos-client
      working-directory: packages/minter-contracts

    - run: chmod a+x tezos-client
      if: steps.cache-tezos-client.outputs.cache-hit != 'true'
      working-directory: packages/minter-contracts
    
    - uses: actions/cache@v2
      id: yarn
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn
      if: steps.yarn.outputs.cache-hit != 'true'

    - uses: actions/download-artifact@v2
      name: Download compiled contracts
      with:
        name: ligo-bin
        path: packages/minter-contracts

    - run: tar -xzf bin.tar.gz
      name: Unpack compiled contracts
      working-directory: packages/minter-contracts

    - name: Compile contracts
      working-directory: packages/minter-contracts
      run: |
        docker run --rm --name flextesa --detach -p 20000:20000 tqtezos/flextesa:20210316 edobox start
        yarn michelson-to-ts --client-path ./tezos-client --endpoint http://localhost:20000

  # Test LIGO contracts (whose that are covered with cleveland)
  test-cleveland:
    name: Cleveland tests
    runs-on: ubuntu-latest
    needs: compile-ligo
    steps:
    - uses: actions/checkout@v2
      if: github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.ref == 'refs/heads/main' || github.event.ref == 'refs/heads/develop'

    - uses: actions/cache@v1
      name: Cache ~/.stack
      with:
        path: ~/.stack
        key: stack

    - uses: actions/setup-haskell@v1.1.4
      name: Setup Haskell Stack
      with:
        ghc-version: 9.0.1  # higher than necessary, but is cached in the runner
        stack-version: 2.3
    
    - uses: actions/download-artifact@v2
      name: Download compiled contracts
      with:
        name: ligo-bin
        path: packages/minter-contracts
    
    - run: tar -xzf bin.tar.gz
      name: Unpack compiled contracts
      working-directory: packages/minter-contracts

    - name: Build dependencies
      run: make -C packages/minter-contracts/test-hs build-haskell-deps

    - name: Tests in emulation
      run: |
        make -C packages/minter-contracts/test-hs \
          LIGO="$LIGO_EXE" \
          EXTRA_STACK_OPTIONS="--system-ghc --ghc-options=-Werror" \
          TEST_ARGUMENTS="--nettest-no-run-network"

  links-check:
    name: Verify links in markdown documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: serokell/xrefcheck-action@v1
      with:
        xrefcheck-version: 0.1.3

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install modules
      run: yarn
    - name: Run ESLint
      run: yarn lerna run lint
